/**************************************************
--------------------
Level- MEdium
--------------------

Given a list of N fractions, represented as two lists numerator and denominator, the task is to determine the count of pairs of fractions whose sum equals 1.

_________________________________

Example 1:

Input:
N = 4
numerator = [1, 2, 2, 8]
denominator = [2, 4, 6, 12]
Output:
2
Explanation:
Fractions 1/2 and 2/4 sum to 1. Similarly fractions 2/6 and 8/12 sum to 1. So there are 2 pairs of fractions which sum to 1.

Example 2:

Input:
N = 5
numerator = [3, 1, 12, 81, 2]
denominator = [9, 10, 18, 90, 5]
Output:
2
Explanation:
Fractions 3/9 and 12/18 sum to 1. Similarly fractions 1/10 and 81/90 sum to 1. So there are 2 pairs of fractions which sum to 1.

_________________________________

class Solution {
    public static int countFractions(int n, int[] numerator, int[] denominator) {
        // code here
        int count = 0;
        
        HashMap<Double,Integer> hmap = new HashMap<>();
        
        for(int i=0;i<n;i++)
        {
            double t1 = (double)numerator[i]/denominator[i];
            double t2 = (double)(denominator[i] - numerator[i])/denominator[i];
            
            if(hmap.containsKey(t2))
            {
                count += hmap.get(t2);
            }
            hmap.put(t1,hmap.getOrDefault(t1,0)+1);
        }
        return count;
    }
}

***************************************************/
